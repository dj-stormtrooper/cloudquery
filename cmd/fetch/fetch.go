package fetch

import (
	"fmt"

	"github.com/cloudquery/cloudquery/cmd/utils"
	"github.com/cloudquery/cloudquery/internal/analytics"
	"github.com/cloudquery/cloudquery/internal/firebase"
	"github.com/cloudquery/cloudquery/pkg/core"
	"github.com/cloudquery/cloudquery/pkg/errors"
	"github.com/cloudquery/cloudquery/pkg/plugin"
	"github.com/cloudquery/cloudquery/pkg/plugin/registry"
	"github.com/cloudquery/cloudquery/pkg/ui"
	"github.com/cloudquery/cloudquery/pkg/ui/console"
	"github.com/spf13/cobra"
	"github.com/vbauerster/mpb/v6/decor"
)

const (
	fetchShort = "Fetch resources from configured providers"
	fetchLong  = `Fetch resources from configured providers
	
	This requires a cloudquery.yml file which can be generated by "cloudquery init"
	`
	fetchExample = `  # Fetch configured providers to PostgreSQL as configured in cloudquery.yml
	cloudquery fetch`
)

// sendProviderTelemetryEvents sends all collected telemetry events from the provider fetch response.
// It will panic if fr argument is nil.
func sendProviderTelemetryEvents(providers registry.Providers, fr *core.FetchResponse) {
	for _, e := range fr.TelemetryEvents {
		analytics.Capture(e.Category, providers, e, nil)
	}
	for _, pfs := range fr.ProviderFetchSummary {
		for _, rfs := range pfs.FetchedResources {
			for _, e := range rfs.TelemetryEvents {
				analytics.Capture(e.Category, providers, e, nil)
			}
		}
	}
}

func NewCmdFetch() *cobra.Command {
	fetchCmd := &cobra.Command{
		Use:     "fetch",
		Short:   fetchShort,
		Long:    fetchLong,
		Example: fetchExample,
		RunE: func(cmd *cobra.Command, args []string) error {
			c, err := console.CreateClient(cmd.Context(), utils.GetConfigFile(), false, nil, utils.InstanceId)
			if err != nil {
				return err
			}
			result, diags := c.Fetch(cmd.Context())
			errors.CaptureDiagnostics(diags, map[string]string{"command": "fetch"})
			if result != nil {
				for _, p := range result.ProviderFetchSummary {
					analytics.Capture("fetch", c.Providers, p, diags, "fetch_id", result.FetchId)
				}
				sendProviderTelemetryEvents(c.Providers, result)
			}
			if diags.HasErrors() {
				return fmt.Errorf("provider has one or more errors, check logs")
			}
			return nil
		},
	}

	return fetchCmd
}

func fetch(cmd *cobra.Command, args []string) error {
	var progressUpdater ui.Progress

	if ui.DoProgress() {
		progressUpdater = console.NewProgress(cmd.Context(), func(o *console.ProgressOptions) {
			o.AppendDecorators = []decor.Decorator{decor.Percentage()}
		})
	}

	hub := registry.NewRegistryHub(
		firebase.CloudQueryRegistryURL,
		registry.WithPluginDirectory(cfg.CloudQuery.PluginDirectory),
		registry.WithProgress(progressUpdater))
	pm, err := plugin.NewManager(hub, plugin.WithAllowReattach())
	if err != nil {
		return err
	}
	return nil
}
